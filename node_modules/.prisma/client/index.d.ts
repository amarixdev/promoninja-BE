
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Offer
 * 
 */
export type Offer = {
  sponsor: string
  promoCode: string | null
  url: string
}

/**
 * Model Podcast
 * 
 */
export type Podcast = {
  id: string
  title: string
  imageUrl: string | null
  sponsorId: string[]
  categoryId: string[]
  offer: Offer[]
  publisher: string
  description: string | null
  backgroundColor: string | null
  externalUrl: string | null
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: string
  name: string
  podcastId: string[]
}

/**
 * Model Sponsor
 * 
 */
export type Sponsor = {
  id: string
  name: string
  imageUrl: string | null
  url: string
  podcastId: string[]
  sponsorCategoryId: string[]
  summary: string | null
  offer: string | null
}

/**
 * Model SponsorCategory
 * 
 */
export type SponsorCategory = {
  id: string
  name: string
  sponsorId: string[]
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Podcasts
 * const podcasts = await prisma.podcast.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Podcasts
   * const podcasts = await prisma.podcast.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

      /**
   * `prisma.podcast`: Exposes CRUD operations for the **Podcast** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Podcasts
    * const podcasts = await prisma.podcast.findMany()
    * ```
    */
  get podcast(): Prisma.PodcastDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.sponsor`: Exposes CRUD operations for the **Sponsor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sponsors
    * const sponsors = await prisma.sponsor.findMany()
    * ```
    */
  get sponsor(): Prisma.SponsorDelegate<GlobalReject>;

  /**
   * `prisma.sponsorCategory`: Exposes CRUD operations for the **SponsorCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SponsorCategories
    * const sponsorCategories = await prisma.sponsorCategory.findMany()
    * ```
    */
  get sponsorCategory(): Prisma.SponsorCategoryDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Podcast: 'Podcast',
    Category: 'Category',
    Sponsor: 'Sponsor',
    SponsorCategory: 'SponsorCategory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PodcastCountOutputType
   */


  export type PodcastCountOutputType = {
    category: number
    sponsors: number
  }

  export type PodcastCountOutputTypeSelect = {
    category?: boolean
    sponsors?: boolean
  }

  export type PodcastCountOutputTypeGetPayload<S extends boolean | null | undefined | PodcastCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PodcastCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PodcastCountOutputTypeArgs)
    ? PodcastCountOutputType 
    : S extends { select: any } & (PodcastCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PodcastCountOutputType ? PodcastCountOutputType[P] : never
  } 
      : PodcastCountOutputType




  // Custom InputTypes

  /**
   * PodcastCountOutputType without action
   */
  export type PodcastCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PodcastCountOutputType
     */
    select?: PodcastCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    podcast: number
  }

  export type CategoryCountOutputTypeSelect = {
    podcast?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoryCountOutputTypeArgs)
    ? CategoryCountOutputType 
    : S extends { select: any } & (CategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
      : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type SponsorCountOutputType
   */


  export type SponsorCountOutputType = {
    podcast: number
    sponsorCategory: number
  }

  export type SponsorCountOutputTypeSelect = {
    podcast?: boolean
    sponsorCategory?: boolean
  }

  export type SponsorCountOutputTypeGetPayload<S extends boolean | null | undefined | SponsorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SponsorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SponsorCountOutputTypeArgs)
    ? SponsorCountOutputType 
    : S extends { select: any } & (SponsorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SponsorCountOutputType ? SponsorCountOutputType[P] : never
  } 
      : SponsorCountOutputType




  // Custom InputTypes

  /**
   * SponsorCountOutputType without action
   */
  export type SponsorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SponsorCountOutputType
     */
    select?: SponsorCountOutputTypeSelect | null
  }



  /**
   * Count Type SponsorCategoryCountOutputType
   */


  export type SponsorCategoryCountOutputType = {
    sponsor: number
  }

  export type SponsorCategoryCountOutputTypeSelect = {
    sponsor?: boolean
  }

  export type SponsorCategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | SponsorCategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SponsorCategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SponsorCategoryCountOutputTypeArgs)
    ? SponsorCategoryCountOutputType 
    : S extends { select: any } & (SponsorCategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SponsorCategoryCountOutputType ? SponsorCategoryCountOutputType[P] : never
  } 
      : SponsorCategoryCountOutputType




  // Custom InputTypes

  /**
   * SponsorCategoryCountOutputType without action
   */
  export type SponsorCategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategoryCountOutputType
     */
    select?: SponsorCategoryCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Offer
   */





  export type OfferSelect = {
    sponsor?: boolean
    promoCode?: boolean
    url?: boolean
  }


  export type OfferGetPayload<S extends boolean | null | undefined | OfferArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Offer :
    S extends undefined ? never :
    S extends { include: any } & (OfferArgs)
    ? Offer 
    : S extends { select: any } & (OfferArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Offer ? Offer[P] : never
  } 
      : Offer



  export interface OfferDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {







  }

  /**
   * The delegate class that acts as a "Promise-like" for Offer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OfferClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Offer without action
   */
  export type OfferArgs = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect | null
  }



  /**
   * Model Podcast
   */


  export type AggregatePodcast = {
    _count: PodcastCountAggregateOutputType | null
    _min: PodcastMinAggregateOutputType | null
    _max: PodcastMaxAggregateOutputType | null
  }

  export type PodcastMinAggregateOutputType = {
    id: string | null
    title: string | null
    imageUrl: string | null
    publisher: string | null
    description: string | null
    backgroundColor: string | null
    externalUrl: string | null
  }

  export type PodcastMaxAggregateOutputType = {
    id: string | null
    title: string | null
    imageUrl: string | null
    publisher: string | null
    description: string | null
    backgroundColor: string | null
    externalUrl: string | null
  }

  export type PodcastCountAggregateOutputType = {
    id: number
    title: number
    imageUrl: number
    sponsorId: number
    categoryId: number
    publisher: number
    description: number
    backgroundColor: number
    externalUrl: number
    _all: number
  }


  export type PodcastMinAggregateInputType = {
    id?: true
    title?: true
    imageUrl?: true
    publisher?: true
    description?: true
    backgroundColor?: true
    externalUrl?: true
  }

  export type PodcastMaxAggregateInputType = {
    id?: true
    title?: true
    imageUrl?: true
    publisher?: true
    description?: true
    backgroundColor?: true
    externalUrl?: true
  }

  export type PodcastCountAggregateInputType = {
    id?: true
    title?: true
    imageUrl?: true
    sponsorId?: true
    categoryId?: true
    publisher?: true
    description?: true
    backgroundColor?: true
    externalUrl?: true
    _all?: true
  }

  export type PodcastAggregateArgs = {
    /**
     * Filter which Podcast to aggregate.
     */
    where?: PodcastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Podcasts to fetch.
     */
    orderBy?: Enumerable<PodcastOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PodcastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Podcasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Podcasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Podcasts
    **/
    _count?: true | PodcastCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PodcastMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PodcastMaxAggregateInputType
  }

  export type GetPodcastAggregateType<T extends PodcastAggregateArgs> = {
        [P in keyof T & keyof AggregatePodcast]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePodcast[P]>
      : GetScalarType<T[P], AggregatePodcast[P]>
  }




  export type PodcastGroupByArgs = {
    where?: PodcastWhereInput
    orderBy?: Enumerable<PodcastOrderByWithAggregationInput>
    by: PodcastScalarFieldEnum[]
    having?: PodcastScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PodcastCountAggregateInputType | true
    _min?: PodcastMinAggregateInputType
    _max?: PodcastMaxAggregateInputType
  }


  export type PodcastGroupByOutputType = {
    id: string
    title: string
    imageUrl: string | null
    sponsorId: string[]
    categoryId: string[]
    publisher: string
    description: string | null
    backgroundColor: string | null
    externalUrl: string | null
    _count: PodcastCountAggregateOutputType | null
    _min: PodcastMinAggregateOutputType | null
    _max: PodcastMaxAggregateOutputType | null
  }

  type GetPodcastGroupByPayload<T extends PodcastGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PodcastGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PodcastGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PodcastGroupByOutputType[P]>
            : GetScalarType<T[P], PodcastGroupByOutputType[P]>
        }
      >
    >


  export type PodcastSelect = {
    id?: boolean
    title?: boolean
    imageUrl?: boolean
    sponsorId?: boolean
    categoryId?: boolean
    offer?: boolean | OfferArgs
    publisher?: boolean
    description?: boolean
    backgroundColor?: boolean
    externalUrl?: boolean
    category?: boolean | Podcast$categoryArgs
    sponsors?: boolean | Podcast$sponsorsArgs
    _count?: boolean | PodcastCountOutputTypeArgs
  }


  export type PodcastInclude = {
    category?: boolean | Podcast$categoryArgs
    sponsors?: boolean | Podcast$sponsorsArgs
    _count?: boolean | PodcastCountOutputTypeArgs
  }

  export type PodcastGetPayload<S extends boolean | null | undefined | PodcastArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Podcast :
    S extends undefined ? never :
    S extends { include: any } & (PodcastArgs | PodcastFindManyArgs)
    ? Podcast  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? Array < CategoryGetPayload<S['include'][P]>>  :
        P extends 'sponsors' ? Array < SponsorGetPayload<S['include'][P]>>  :
        P extends '_count' ? PodcastCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PodcastArgs | PodcastFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'offer' ? Array < OfferGetPayload<S['select'][P]>>  :
        P extends 'category' ? Array < CategoryGetPayload<S['select'][P]>>  :
        P extends 'sponsors' ? Array < SponsorGetPayload<S['select'][P]>>  :
        P extends '_count' ? PodcastCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Podcast ? Podcast[P] : never
  } 
      : Podcast


  type PodcastCountArgs = 
    Omit<PodcastFindManyArgs, 'select' | 'include'> & {
      select?: PodcastCountAggregateInputType | true
    }

  export interface PodcastDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Podcast that matches the filter.
     * @param {PodcastFindUniqueArgs} args - Arguments to find a Podcast
     * @example
     * // Get one Podcast
     * const podcast = await prisma.podcast.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PodcastFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PodcastFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Podcast'> extends True ? Prisma__PodcastClient<PodcastGetPayload<T>> : Prisma__PodcastClient<PodcastGetPayload<T> | null, null>

    /**
     * Find one Podcast that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PodcastFindUniqueOrThrowArgs} args - Arguments to find a Podcast
     * @example
     * // Get one Podcast
     * const podcast = await prisma.podcast.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PodcastFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PodcastFindUniqueOrThrowArgs>
    ): Prisma__PodcastClient<PodcastGetPayload<T>>

    /**
     * Find the first Podcast that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PodcastFindFirstArgs} args - Arguments to find a Podcast
     * @example
     * // Get one Podcast
     * const podcast = await prisma.podcast.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PodcastFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PodcastFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Podcast'> extends True ? Prisma__PodcastClient<PodcastGetPayload<T>> : Prisma__PodcastClient<PodcastGetPayload<T> | null, null>

    /**
     * Find the first Podcast that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PodcastFindFirstOrThrowArgs} args - Arguments to find a Podcast
     * @example
     * // Get one Podcast
     * const podcast = await prisma.podcast.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PodcastFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PodcastFindFirstOrThrowArgs>
    ): Prisma__PodcastClient<PodcastGetPayload<T>>

    /**
     * Find zero or more Podcasts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PodcastFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Podcasts
     * const podcasts = await prisma.podcast.findMany()
     * 
     * // Get first 10 Podcasts
     * const podcasts = await prisma.podcast.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const podcastWithIdOnly = await prisma.podcast.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PodcastFindManyArgs>(
      args?: SelectSubset<T, PodcastFindManyArgs>
    ): Prisma.PrismaPromise<Array<PodcastGetPayload<T>>>

    /**
     * Create a Podcast.
     * @param {PodcastCreateArgs} args - Arguments to create a Podcast.
     * @example
     * // Create one Podcast
     * const Podcast = await prisma.podcast.create({
     *   data: {
     *     // ... data to create a Podcast
     *   }
     * })
     * 
    **/
    create<T extends PodcastCreateArgs>(
      args: SelectSubset<T, PodcastCreateArgs>
    ): Prisma__PodcastClient<PodcastGetPayload<T>>

    /**
     * Create many Podcasts.
     *     @param {PodcastCreateManyArgs} args - Arguments to create many Podcasts.
     *     @example
     *     // Create many Podcasts
     *     const podcast = await prisma.podcast.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PodcastCreateManyArgs>(
      args?: SelectSubset<T, PodcastCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Podcast.
     * @param {PodcastDeleteArgs} args - Arguments to delete one Podcast.
     * @example
     * // Delete one Podcast
     * const Podcast = await prisma.podcast.delete({
     *   where: {
     *     // ... filter to delete one Podcast
     *   }
     * })
     * 
    **/
    delete<T extends PodcastDeleteArgs>(
      args: SelectSubset<T, PodcastDeleteArgs>
    ): Prisma__PodcastClient<PodcastGetPayload<T>>

    /**
     * Update one Podcast.
     * @param {PodcastUpdateArgs} args - Arguments to update one Podcast.
     * @example
     * // Update one Podcast
     * const podcast = await prisma.podcast.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PodcastUpdateArgs>(
      args: SelectSubset<T, PodcastUpdateArgs>
    ): Prisma__PodcastClient<PodcastGetPayload<T>>

    /**
     * Delete zero or more Podcasts.
     * @param {PodcastDeleteManyArgs} args - Arguments to filter Podcasts to delete.
     * @example
     * // Delete a few Podcasts
     * const { count } = await prisma.podcast.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PodcastDeleteManyArgs>(
      args?: SelectSubset<T, PodcastDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Podcasts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PodcastUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Podcasts
     * const podcast = await prisma.podcast.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PodcastUpdateManyArgs>(
      args: SelectSubset<T, PodcastUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Podcast.
     * @param {PodcastUpsertArgs} args - Arguments to update or create a Podcast.
     * @example
     * // Update or create a Podcast
     * const podcast = await prisma.podcast.upsert({
     *   create: {
     *     // ... data to create a Podcast
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Podcast we want to update
     *   }
     * })
    **/
    upsert<T extends PodcastUpsertArgs>(
      args: SelectSubset<T, PodcastUpsertArgs>
    ): Prisma__PodcastClient<PodcastGetPayload<T>>

    /**
     * Find zero or more Podcasts that matches the filter.
     * @param {PodcastFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const podcast = await prisma.podcast.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PodcastFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Podcast.
     * @param {PodcastAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const podcast = await prisma.podcast.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PodcastAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Podcasts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PodcastCountArgs} args - Arguments to filter Podcasts to count.
     * @example
     * // Count the number of Podcasts
     * const count = await prisma.podcast.count({
     *   where: {
     *     // ... the filter for the Podcasts we want to count
     *   }
     * })
    **/
    count<T extends PodcastCountArgs>(
      args?: Subset<T, PodcastCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PodcastCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Podcast.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PodcastAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PodcastAggregateArgs>(args: Subset<T, PodcastAggregateArgs>): Prisma.PrismaPromise<GetPodcastAggregateType<T>>

    /**
     * Group by Podcast.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PodcastGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PodcastGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PodcastGroupByArgs['orderBy'] }
        : { orderBy?: PodcastGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PodcastGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPodcastGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Podcast.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PodcastClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    offer<T extends OfferArgs= {}>(args?: Subset<T, OfferArgs>): Prisma.PrismaPromise<Array<OfferGetPayload<T>>| Null>;

    category<T extends Podcast$categoryArgs= {}>(args?: Subset<T, Podcast$categoryArgs>): Prisma.PrismaPromise<Array<CategoryGetPayload<T>>| Null>;

    sponsors<T extends Podcast$sponsorsArgs= {}>(args?: Subset<T, Podcast$sponsorsArgs>): Prisma.PrismaPromise<Array<SponsorGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Podcast base type for findUnique actions
   */
  export type PodcastFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * Filter, which Podcast to fetch.
     */
    where: PodcastWhereUniqueInput
  }

  /**
   * Podcast findUnique
   */
  export interface PodcastFindUniqueArgs extends PodcastFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Podcast findUniqueOrThrow
   */
  export type PodcastFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * Filter, which Podcast to fetch.
     */
    where: PodcastWhereUniqueInput
  }


  /**
   * Podcast base type for findFirst actions
   */
  export type PodcastFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * Filter, which Podcast to fetch.
     */
    where?: PodcastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Podcasts to fetch.
     */
    orderBy?: Enumerable<PodcastOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Podcasts.
     */
    cursor?: PodcastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Podcasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Podcasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Podcasts.
     */
    distinct?: Enumerable<PodcastScalarFieldEnum>
  }

  /**
   * Podcast findFirst
   */
  export interface PodcastFindFirstArgs extends PodcastFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Podcast findFirstOrThrow
   */
  export type PodcastFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * Filter, which Podcast to fetch.
     */
    where?: PodcastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Podcasts to fetch.
     */
    orderBy?: Enumerable<PodcastOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Podcasts.
     */
    cursor?: PodcastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Podcasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Podcasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Podcasts.
     */
    distinct?: Enumerable<PodcastScalarFieldEnum>
  }


  /**
   * Podcast findMany
   */
  export type PodcastFindManyArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * Filter, which Podcasts to fetch.
     */
    where?: PodcastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Podcasts to fetch.
     */
    orderBy?: Enumerable<PodcastOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Podcasts.
     */
    cursor?: PodcastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Podcasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Podcasts.
     */
    skip?: number
    distinct?: Enumerable<PodcastScalarFieldEnum>
  }


  /**
   * Podcast create
   */
  export type PodcastCreateArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * The data needed to create a Podcast.
     */
    data: XOR<PodcastCreateInput, PodcastUncheckedCreateInput>
  }


  /**
   * Podcast createMany
   */
  export type PodcastCreateManyArgs = {
    /**
     * The data used to create many Podcasts.
     */
    data: Enumerable<PodcastCreateManyInput>
  }


  /**
   * Podcast update
   */
  export type PodcastUpdateArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * The data needed to update a Podcast.
     */
    data: XOR<PodcastUpdateInput, PodcastUncheckedUpdateInput>
    /**
     * Choose, which Podcast to update.
     */
    where: PodcastWhereUniqueInput
  }


  /**
   * Podcast updateMany
   */
  export type PodcastUpdateManyArgs = {
    /**
     * The data used to update Podcasts.
     */
    data: XOR<PodcastUpdateManyMutationInput, PodcastUncheckedUpdateManyInput>
    /**
     * Filter which Podcasts to update
     */
    where?: PodcastWhereInput
  }


  /**
   * Podcast upsert
   */
  export type PodcastUpsertArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * The filter to search for the Podcast to update in case it exists.
     */
    where: PodcastWhereUniqueInput
    /**
     * In case the Podcast found by the `where` argument doesn't exist, create a new Podcast with this data.
     */
    create: XOR<PodcastCreateInput, PodcastUncheckedCreateInput>
    /**
     * In case the Podcast was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PodcastUpdateInput, PodcastUncheckedUpdateInput>
  }


  /**
   * Podcast delete
   */
  export type PodcastDeleteArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    /**
     * Filter which Podcast to delete.
     */
    where: PodcastWhereUniqueInput
  }


  /**
   * Podcast deleteMany
   */
  export type PodcastDeleteManyArgs = {
    /**
     * Filter which Podcasts to delete
     */
    where?: PodcastWhereInput
  }


  /**
   * Podcast findRaw
   */
  export type PodcastFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Podcast aggregateRaw
   */
  export type PodcastAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Podcast.category
   */
  export type Podcast$categoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Podcast.sponsors
   */
  export type Podcast$sponsorsArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    where?: SponsorWhereInput
    orderBy?: Enumerable<SponsorOrderByWithRelationInput>
    cursor?: SponsorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SponsorScalarFieldEnum>
  }


  /**
   * Podcast without action
   */
  export type PodcastArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    podcastId: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    podcastId?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: CategoryScalarFieldEnum[]
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: string
    name: string
    podcastId: string[]
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    podcastId?: boolean
    podcast?: boolean | Category$podcastArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }


  export type CategoryInclude = {
    podcast?: boolean | Category$podcastArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<S extends boolean | null | undefined | CategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Category :
    S extends undefined ? never :
    S extends { include: any } & (CategoryArgs | CategoryFindManyArgs)
    ? Category  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'podcast' ? Array < PodcastGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CategoryArgs | CategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'podcast' ? Array < PodcastGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
      : Category


  type CategoryCountArgs = 
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<CategoryGetPayload<T>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find zero or more Categories that matches the filter.
     * @param {CategoryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const category = await prisma.category.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: CategoryFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Category.
     * @param {CategoryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const category = await prisma.category.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: CategoryAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    podcast<T extends Category$podcastArgs= {}>(args?: Subset<T, Category$podcastArgs>): Prisma.PrismaPromise<Array<PodcastGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     */
    data: Enumerable<CategoryCreateManyInput>
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category findRaw
   */
  export type CategoryFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Category aggregateRaw
   */
  export type CategoryAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Category.podcast
   */
  export type Category$podcastArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    where?: PodcastWhereInput
    orderBy?: Enumerable<PodcastOrderByWithRelationInput>
    cursor?: PodcastWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PodcastScalarFieldEnum>
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
  }



  /**
   * Model Sponsor
   */


  export type AggregateSponsor = {
    _count: SponsorCountAggregateOutputType | null
    _min: SponsorMinAggregateOutputType | null
    _max: SponsorMaxAggregateOutputType | null
  }

  export type SponsorMinAggregateOutputType = {
    id: string | null
    name: string | null
    imageUrl: string | null
    url: string | null
    summary: string | null
    offer: string | null
  }

  export type SponsorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    imageUrl: string | null
    url: string | null
    summary: string | null
    offer: string | null
  }

  export type SponsorCountAggregateOutputType = {
    id: number
    name: number
    imageUrl: number
    url: number
    podcastId: number
    sponsorCategoryId: number
    summary: number
    offer: number
    _all: number
  }


  export type SponsorMinAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    url?: true
    summary?: true
    offer?: true
  }

  export type SponsorMaxAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    url?: true
    summary?: true
    offer?: true
  }

  export type SponsorCountAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    url?: true
    podcastId?: true
    sponsorCategoryId?: true
    summary?: true
    offer?: true
    _all?: true
  }

  export type SponsorAggregateArgs = {
    /**
     * Filter which Sponsor to aggregate.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: Enumerable<SponsorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sponsors
    **/
    _count?: true | SponsorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SponsorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SponsorMaxAggregateInputType
  }

  export type GetSponsorAggregateType<T extends SponsorAggregateArgs> = {
        [P in keyof T & keyof AggregateSponsor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSponsor[P]>
      : GetScalarType<T[P], AggregateSponsor[P]>
  }




  export type SponsorGroupByArgs = {
    where?: SponsorWhereInput
    orderBy?: Enumerable<SponsorOrderByWithAggregationInput>
    by: SponsorScalarFieldEnum[]
    having?: SponsorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SponsorCountAggregateInputType | true
    _min?: SponsorMinAggregateInputType
    _max?: SponsorMaxAggregateInputType
  }


  export type SponsorGroupByOutputType = {
    id: string
    name: string
    imageUrl: string | null
    url: string
    podcastId: string[]
    sponsorCategoryId: string[]
    summary: string | null
    offer: string | null
    _count: SponsorCountAggregateOutputType | null
    _min: SponsorMinAggregateOutputType | null
    _max: SponsorMaxAggregateOutputType | null
  }

  type GetSponsorGroupByPayload<T extends SponsorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SponsorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SponsorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SponsorGroupByOutputType[P]>
            : GetScalarType<T[P], SponsorGroupByOutputType[P]>
        }
      >
    >


  export type SponsorSelect = {
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    url?: boolean
    podcastId?: boolean
    sponsorCategoryId?: boolean
    summary?: boolean
    offer?: boolean
    podcast?: boolean | Sponsor$podcastArgs
    sponsorCategory?: boolean | Sponsor$sponsorCategoryArgs
    _count?: boolean | SponsorCountOutputTypeArgs
  }


  export type SponsorInclude = {
    podcast?: boolean | Sponsor$podcastArgs
    sponsorCategory?: boolean | Sponsor$sponsorCategoryArgs
    _count?: boolean | SponsorCountOutputTypeArgs
  }

  export type SponsorGetPayload<S extends boolean | null | undefined | SponsorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Sponsor :
    S extends undefined ? never :
    S extends { include: any } & (SponsorArgs | SponsorFindManyArgs)
    ? Sponsor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'podcast' ? Array < PodcastGetPayload<S['include'][P]>>  :
        P extends 'sponsorCategory' ? Array < SponsorCategoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? SponsorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SponsorArgs | SponsorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'podcast' ? Array < PodcastGetPayload<S['select'][P]>>  :
        P extends 'sponsorCategory' ? Array < SponsorCategoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? SponsorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Sponsor ? Sponsor[P] : never
  } 
      : Sponsor


  type SponsorCountArgs = 
    Omit<SponsorFindManyArgs, 'select' | 'include'> & {
      select?: SponsorCountAggregateInputType | true
    }

  export interface SponsorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sponsor that matches the filter.
     * @param {SponsorFindUniqueArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SponsorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SponsorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sponsor'> extends True ? Prisma__SponsorClient<SponsorGetPayload<T>> : Prisma__SponsorClient<SponsorGetPayload<T> | null, null>

    /**
     * Find one Sponsor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SponsorFindUniqueOrThrowArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SponsorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SponsorFindUniqueOrThrowArgs>
    ): Prisma__SponsorClient<SponsorGetPayload<T>>

    /**
     * Find the first Sponsor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindFirstArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SponsorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SponsorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sponsor'> extends True ? Prisma__SponsorClient<SponsorGetPayload<T>> : Prisma__SponsorClient<SponsorGetPayload<T> | null, null>

    /**
     * Find the first Sponsor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindFirstOrThrowArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SponsorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SponsorFindFirstOrThrowArgs>
    ): Prisma__SponsorClient<SponsorGetPayload<T>>

    /**
     * Find zero or more Sponsors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sponsors
     * const sponsors = await prisma.sponsor.findMany()
     * 
     * // Get first 10 Sponsors
     * const sponsors = await prisma.sponsor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sponsorWithIdOnly = await prisma.sponsor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SponsorFindManyArgs>(
      args?: SelectSubset<T, SponsorFindManyArgs>
    ): Prisma.PrismaPromise<Array<SponsorGetPayload<T>>>

    /**
     * Create a Sponsor.
     * @param {SponsorCreateArgs} args - Arguments to create a Sponsor.
     * @example
     * // Create one Sponsor
     * const Sponsor = await prisma.sponsor.create({
     *   data: {
     *     // ... data to create a Sponsor
     *   }
     * })
     * 
    **/
    create<T extends SponsorCreateArgs>(
      args: SelectSubset<T, SponsorCreateArgs>
    ): Prisma__SponsorClient<SponsorGetPayload<T>>

    /**
     * Create many Sponsors.
     *     @param {SponsorCreateManyArgs} args - Arguments to create many Sponsors.
     *     @example
     *     // Create many Sponsors
     *     const sponsor = await prisma.sponsor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SponsorCreateManyArgs>(
      args?: SelectSubset<T, SponsorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sponsor.
     * @param {SponsorDeleteArgs} args - Arguments to delete one Sponsor.
     * @example
     * // Delete one Sponsor
     * const Sponsor = await prisma.sponsor.delete({
     *   where: {
     *     // ... filter to delete one Sponsor
     *   }
     * })
     * 
    **/
    delete<T extends SponsorDeleteArgs>(
      args: SelectSubset<T, SponsorDeleteArgs>
    ): Prisma__SponsorClient<SponsorGetPayload<T>>

    /**
     * Update one Sponsor.
     * @param {SponsorUpdateArgs} args - Arguments to update one Sponsor.
     * @example
     * // Update one Sponsor
     * const sponsor = await prisma.sponsor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SponsorUpdateArgs>(
      args: SelectSubset<T, SponsorUpdateArgs>
    ): Prisma__SponsorClient<SponsorGetPayload<T>>

    /**
     * Delete zero or more Sponsors.
     * @param {SponsorDeleteManyArgs} args - Arguments to filter Sponsors to delete.
     * @example
     * // Delete a few Sponsors
     * const { count } = await prisma.sponsor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SponsorDeleteManyArgs>(
      args?: SelectSubset<T, SponsorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sponsors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sponsors
     * const sponsor = await prisma.sponsor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SponsorUpdateManyArgs>(
      args: SelectSubset<T, SponsorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sponsor.
     * @param {SponsorUpsertArgs} args - Arguments to update or create a Sponsor.
     * @example
     * // Update or create a Sponsor
     * const sponsor = await prisma.sponsor.upsert({
     *   create: {
     *     // ... data to create a Sponsor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sponsor we want to update
     *   }
     * })
    **/
    upsert<T extends SponsorUpsertArgs>(
      args: SelectSubset<T, SponsorUpsertArgs>
    ): Prisma__SponsorClient<SponsorGetPayload<T>>

    /**
     * Find zero or more Sponsors that matches the filter.
     * @param {SponsorFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const sponsor = await prisma.sponsor.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SponsorFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Sponsor.
     * @param {SponsorAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const sponsor = await prisma.sponsor.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SponsorAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Sponsors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCountArgs} args - Arguments to filter Sponsors to count.
     * @example
     * // Count the number of Sponsors
     * const count = await prisma.sponsor.count({
     *   where: {
     *     // ... the filter for the Sponsors we want to count
     *   }
     * })
    **/
    count<T extends SponsorCountArgs>(
      args?: Subset<T, SponsorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SponsorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sponsor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SponsorAggregateArgs>(args: Subset<T, SponsorAggregateArgs>): Prisma.PrismaPromise<GetSponsorAggregateType<T>>

    /**
     * Group by Sponsor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SponsorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SponsorGroupByArgs['orderBy'] }
        : { orderBy?: SponsorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SponsorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSponsorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Sponsor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SponsorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    podcast<T extends Sponsor$podcastArgs= {}>(args?: Subset<T, Sponsor$podcastArgs>): Prisma.PrismaPromise<Array<PodcastGetPayload<T>>| Null>;

    sponsorCategory<T extends Sponsor$sponsorCategoryArgs= {}>(args?: Subset<T, Sponsor$sponsorCategoryArgs>): Prisma.PrismaPromise<Array<SponsorCategoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Sponsor base type for findUnique actions
   */
  export type SponsorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor findUnique
   */
  export interface SponsorFindUniqueArgs extends SponsorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sponsor findUniqueOrThrow
   */
  export type SponsorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where: SponsorWhereUniqueInput
  }


  /**
   * Sponsor base type for findFirst actions
   */
  export type SponsorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: Enumerable<SponsorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sponsors.
     */
    distinct?: Enumerable<SponsorScalarFieldEnum>
  }

  /**
   * Sponsor findFirst
   */
  export interface SponsorFindFirstArgs extends SponsorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sponsor findFirstOrThrow
   */
  export type SponsorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: Enumerable<SponsorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sponsors.
     */
    distinct?: Enumerable<SponsorScalarFieldEnum>
  }


  /**
   * Sponsor findMany
   */
  export type SponsorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * Filter, which Sponsors to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: Enumerable<SponsorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    distinct?: Enumerable<SponsorScalarFieldEnum>
  }


  /**
   * Sponsor create
   */
  export type SponsorCreateArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * The data needed to create a Sponsor.
     */
    data: XOR<SponsorCreateInput, SponsorUncheckedCreateInput>
  }


  /**
   * Sponsor createMany
   */
  export type SponsorCreateManyArgs = {
    /**
     * The data used to create many Sponsors.
     */
    data: Enumerable<SponsorCreateManyInput>
  }


  /**
   * Sponsor update
   */
  export type SponsorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * The data needed to update a Sponsor.
     */
    data: XOR<SponsorUpdateInput, SponsorUncheckedUpdateInput>
    /**
     * Choose, which Sponsor to update.
     */
    where: SponsorWhereUniqueInput
  }


  /**
   * Sponsor updateMany
   */
  export type SponsorUpdateManyArgs = {
    /**
     * The data used to update Sponsors.
     */
    data: XOR<SponsorUpdateManyMutationInput, SponsorUncheckedUpdateManyInput>
    /**
     * Filter which Sponsors to update
     */
    where?: SponsorWhereInput
  }


  /**
   * Sponsor upsert
   */
  export type SponsorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * The filter to search for the Sponsor to update in case it exists.
     */
    where: SponsorWhereUniqueInput
    /**
     * In case the Sponsor found by the `where` argument doesn't exist, create a new Sponsor with this data.
     */
    create: XOR<SponsorCreateInput, SponsorUncheckedCreateInput>
    /**
     * In case the Sponsor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SponsorUpdateInput, SponsorUncheckedUpdateInput>
  }


  /**
   * Sponsor delete
   */
  export type SponsorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    /**
     * Filter which Sponsor to delete.
     */
    where: SponsorWhereUniqueInput
  }


  /**
   * Sponsor deleteMany
   */
  export type SponsorDeleteManyArgs = {
    /**
     * Filter which Sponsors to delete
     */
    where?: SponsorWhereInput
  }


  /**
   * Sponsor findRaw
   */
  export type SponsorFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Sponsor aggregateRaw
   */
  export type SponsorAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Sponsor.podcast
   */
  export type Sponsor$podcastArgs = {
    /**
     * Select specific fields to fetch from the Podcast
     */
    select?: PodcastSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PodcastInclude | null
    where?: PodcastWhereInput
    orderBy?: Enumerable<PodcastOrderByWithRelationInput>
    cursor?: PodcastWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PodcastScalarFieldEnum>
  }


  /**
   * Sponsor.sponsorCategory
   */
  export type Sponsor$sponsorCategoryArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    where?: SponsorCategoryWhereInput
    orderBy?: Enumerable<SponsorCategoryOrderByWithRelationInput>
    cursor?: SponsorCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SponsorCategoryScalarFieldEnum>
  }


  /**
   * Sponsor without action
   */
  export type SponsorArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
  }



  /**
   * Model SponsorCategory
   */


  export type AggregateSponsorCategory = {
    _count: SponsorCategoryCountAggregateOutputType | null
    _min: SponsorCategoryMinAggregateOutputType | null
    _max: SponsorCategoryMaxAggregateOutputType | null
  }

  export type SponsorCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type SponsorCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type SponsorCategoryCountAggregateOutputType = {
    id: number
    name: number
    sponsorId: number
    _all: number
  }


  export type SponsorCategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SponsorCategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SponsorCategoryCountAggregateInputType = {
    id?: true
    name?: true
    sponsorId?: true
    _all?: true
  }

  export type SponsorCategoryAggregateArgs = {
    /**
     * Filter which SponsorCategory to aggregate.
     */
    where?: SponsorCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SponsorCategories to fetch.
     */
    orderBy?: Enumerable<SponsorCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SponsorCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SponsorCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SponsorCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SponsorCategories
    **/
    _count?: true | SponsorCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SponsorCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SponsorCategoryMaxAggregateInputType
  }

  export type GetSponsorCategoryAggregateType<T extends SponsorCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSponsorCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSponsorCategory[P]>
      : GetScalarType<T[P], AggregateSponsorCategory[P]>
  }




  export type SponsorCategoryGroupByArgs = {
    where?: SponsorCategoryWhereInput
    orderBy?: Enumerable<SponsorCategoryOrderByWithAggregationInput>
    by: SponsorCategoryScalarFieldEnum[]
    having?: SponsorCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SponsorCategoryCountAggregateInputType | true
    _min?: SponsorCategoryMinAggregateInputType
    _max?: SponsorCategoryMaxAggregateInputType
  }


  export type SponsorCategoryGroupByOutputType = {
    id: string
    name: string
    sponsorId: string[]
    _count: SponsorCategoryCountAggregateOutputType | null
    _min: SponsorCategoryMinAggregateOutputType | null
    _max: SponsorCategoryMaxAggregateOutputType | null
  }

  type GetSponsorCategoryGroupByPayload<T extends SponsorCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SponsorCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SponsorCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SponsorCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], SponsorCategoryGroupByOutputType[P]>
        }
      >
    >


  export type SponsorCategorySelect = {
    id?: boolean
    name?: boolean
    sponsorId?: boolean
    sponsor?: boolean | SponsorCategory$sponsorArgs
    _count?: boolean | SponsorCategoryCountOutputTypeArgs
  }


  export type SponsorCategoryInclude = {
    sponsor?: boolean | SponsorCategory$sponsorArgs
    _count?: boolean | SponsorCategoryCountOutputTypeArgs
  }

  export type SponsorCategoryGetPayload<S extends boolean | null | undefined | SponsorCategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SponsorCategory :
    S extends undefined ? never :
    S extends { include: any } & (SponsorCategoryArgs | SponsorCategoryFindManyArgs)
    ? SponsorCategory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sponsor' ? Array < SponsorGetPayload<S['include'][P]>>  :
        P extends '_count' ? SponsorCategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SponsorCategoryArgs | SponsorCategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sponsor' ? Array < SponsorGetPayload<S['select'][P]>>  :
        P extends '_count' ? SponsorCategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof SponsorCategory ? SponsorCategory[P] : never
  } 
      : SponsorCategory


  type SponsorCategoryCountArgs = 
    Omit<SponsorCategoryFindManyArgs, 'select' | 'include'> & {
      select?: SponsorCategoryCountAggregateInputType | true
    }

  export interface SponsorCategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one SponsorCategory that matches the filter.
     * @param {SponsorCategoryFindUniqueArgs} args - Arguments to find a SponsorCategory
     * @example
     * // Get one SponsorCategory
     * const sponsorCategory = await prisma.sponsorCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SponsorCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SponsorCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SponsorCategory'> extends True ? Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T>> : Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T> | null, null>

    /**
     * Find one SponsorCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SponsorCategoryFindUniqueOrThrowArgs} args - Arguments to find a SponsorCategory
     * @example
     * // Get one SponsorCategory
     * const sponsorCategory = await prisma.sponsorCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SponsorCategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SponsorCategoryFindUniqueOrThrowArgs>
    ): Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T>>

    /**
     * Find the first SponsorCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCategoryFindFirstArgs} args - Arguments to find a SponsorCategory
     * @example
     * // Get one SponsorCategory
     * const sponsorCategory = await prisma.sponsorCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SponsorCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SponsorCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SponsorCategory'> extends True ? Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T>> : Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T> | null, null>

    /**
     * Find the first SponsorCategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCategoryFindFirstOrThrowArgs} args - Arguments to find a SponsorCategory
     * @example
     * // Get one SponsorCategory
     * const sponsorCategory = await prisma.sponsorCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SponsorCategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SponsorCategoryFindFirstOrThrowArgs>
    ): Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T>>

    /**
     * Find zero or more SponsorCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SponsorCategories
     * const sponsorCategories = await prisma.sponsorCategory.findMany()
     * 
     * // Get first 10 SponsorCategories
     * const sponsorCategories = await prisma.sponsorCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sponsorCategoryWithIdOnly = await prisma.sponsorCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SponsorCategoryFindManyArgs>(
      args?: SelectSubset<T, SponsorCategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<SponsorCategoryGetPayload<T>>>

    /**
     * Create a SponsorCategory.
     * @param {SponsorCategoryCreateArgs} args - Arguments to create a SponsorCategory.
     * @example
     * // Create one SponsorCategory
     * const SponsorCategory = await prisma.sponsorCategory.create({
     *   data: {
     *     // ... data to create a SponsorCategory
     *   }
     * })
     * 
    **/
    create<T extends SponsorCategoryCreateArgs>(
      args: SelectSubset<T, SponsorCategoryCreateArgs>
    ): Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T>>

    /**
     * Create many SponsorCategories.
     *     @param {SponsorCategoryCreateManyArgs} args - Arguments to create many SponsorCategories.
     *     @example
     *     // Create many SponsorCategories
     *     const sponsorCategory = await prisma.sponsorCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SponsorCategoryCreateManyArgs>(
      args?: SelectSubset<T, SponsorCategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SponsorCategory.
     * @param {SponsorCategoryDeleteArgs} args - Arguments to delete one SponsorCategory.
     * @example
     * // Delete one SponsorCategory
     * const SponsorCategory = await prisma.sponsorCategory.delete({
     *   where: {
     *     // ... filter to delete one SponsorCategory
     *   }
     * })
     * 
    **/
    delete<T extends SponsorCategoryDeleteArgs>(
      args: SelectSubset<T, SponsorCategoryDeleteArgs>
    ): Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T>>

    /**
     * Update one SponsorCategory.
     * @param {SponsorCategoryUpdateArgs} args - Arguments to update one SponsorCategory.
     * @example
     * // Update one SponsorCategory
     * const sponsorCategory = await prisma.sponsorCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SponsorCategoryUpdateArgs>(
      args: SelectSubset<T, SponsorCategoryUpdateArgs>
    ): Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T>>

    /**
     * Delete zero or more SponsorCategories.
     * @param {SponsorCategoryDeleteManyArgs} args - Arguments to filter SponsorCategories to delete.
     * @example
     * // Delete a few SponsorCategories
     * const { count } = await prisma.sponsorCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SponsorCategoryDeleteManyArgs>(
      args?: SelectSubset<T, SponsorCategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SponsorCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SponsorCategories
     * const sponsorCategory = await prisma.sponsorCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SponsorCategoryUpdateManyArgs>(
      args: SelectSubset<T, SponsorCategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SponsorCategory.
     * @param {SponsorCategoryUpsertArgs} args - Arguments to update or create a SponsorCategory.
     * @example
     * // Update or create a SponsorCategory
     * const sponsorCategory = await prisma.sponsorCategory.upsert({
     *   create: {
     *     // ... data to create a SponsorCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SponsorCategory we want to update
     *   }
     * })
    **/
    upsert<T extends SponsorCategoryUpsertArgs>(
      args: SelectSubset<T, SponsorCategoryUpsertArgs>
    ): Prisma__SponsorCategoryClient<SponsorCategoryGetPayload<T>>

    /**
     * Find zero or more SponsorCategories that matches the filter.
     * @param {SponsorCategoryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const sponsorCategory = await prisma.sponsorCategory.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SponsorCategoryFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SponsorCategory.
     * @param {SponsorCategoryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const sponsorCategory = await prisma.sponsorCategory.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SponsorCategoryAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of SponsorCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCategoryCountArgs} args - Arguments to filter SponsorCategories to count.
     * @example
     * // Count the number of SponsorCategories
     * const count = await prisma.sponsorCategory.count({
     *   where: {
     *     // ... the filter for the SponsorCategories we want to count
     *   }
     * })
    **/
    count<T extends SponsorCategoryCountArgs>(
      args?: Subset<T, SponsorCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SponsorCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SponsorCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SponsorCategoryAggregateArgs>(args: Subset<T, SponsorCategoryAggregateArgs>): Prisma.PrismaPromise<GetSponsorCategoryAggregateType<T>>

    /**
     * Group by SponsorCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SponsorCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SponsorCategoryGroupByArgs['orderBy'] }
        : { orderBy?: SponsorCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SponsorCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSponsorCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SponsorCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SponsorCategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sponsor<T extends SponsorCategory$sponsorArgs= {}>(args?: Subset<T, SponsorCategory$sponsorArgs>): Prisma.PrismaPromise<Array<SponsorGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SponsorCategory base type for findUnique actions
   */
  export type SponsorCategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * Filter, which SponsorCategory to fetch.
     */
    where: SponsorCategoryWhereUniqueInput
  }

  /**
   * SponsorCategory findUnique
   */
  export interface SponsorCategoryFindUniqueArgs extends SponsorCategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SponsorCategory findUniqueOrThrow
   */
  export type SponsorCategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * Filter, which SponsorCategory to fetch.
     */
    where: SponsorCategoryWhereUniqueInput
  }


  /**
   * SponsorCategory base type for findFirst actions
   */
  export type SponsorCategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * Filter, which SponsorCategory to fetch.
     */
    where?: SponsorCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SponsorCategories to fetch.
     */
    orderBy?: Enumerable<SponsorCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SponsorCategories.
     */
    cursor?: SponsorCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SponsorCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SponsorCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SponsorCategories.
     */
    distinct?: Enumerable<SponsorCategoryScalarFieldEnum>
  }

  /**
   * SponsorCategory findFirst
   */
  export interface SponsorCategoryFindFirstArgs extends SponsorCategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SponsorCategory findFirstOrThrow
   */
  export type SponsorCategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * Filter, which SponsorCategory to fetch.
     */
    where?: SponsorCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SponsorCategories to fetch.
     */
    orderBy?: Enumerable<SponsorCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SponsorCategories.
     */
    cursor?: SponsorCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SponsorCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SponsorCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SponsorCategories.
     */
    distinct?: Enumerable<SponsorCategoryScalarFieldEnum>
  }


  /**
   * SponsorCategory findMany
   */
  export type SponsorCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * Filter, which SponsorCategories to fetch.
     */
    where?: SponsorCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SponsorCategories to fetch.
     */
    orderBy?: Enumerable<SponsorCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SponsorCategories.
     */
    cursor?: SponsorCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SponsorCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SponsorCategories.
     */
    skip?: number
    distinct?: Enumerable<SponsorCategoryScalarFieldEnum>
  }


  /**
   * SponsorCategory create
   */
  export type SponsorCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * The data needed to create a SponsorCategory.
     */
    data: XOR<SponsorCategoryCreateInput, SponsorCategoryUncheckedCreateInput>
  }


  /**
   * SponsorCategory createMany
   */
  export type SponsorCategoryCreateManyArgs = {
    /**
     * The data used to create many SponsorCategories.
     */
    data: Enumerable<SponsorCategoryCreateManyInput>
  }


  /**
   * SponsorCategory update
   */
  export type SponsorCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * The data needed to update a SponsorCategory.
     */
    data: XOR<SponsorCategoryUpdateInput, SponsorCategoryUncheckedUpdateInput>
    /**
     * Choose, which SponsorCategory to update.
     */
    where: SponsorCategoryWhereUniqueInput
  }


  /**
   * SponsorCategory updateMany
   */
  export type SponsorCategoryUpdateManyArgs = {
    /**
     * The data used to update SponsorCategories.
     */
    data: XOR<SponsorCategoryUpdateManyMutationInput, SponsorCategoryUncheckedUpdateManyInput>
    /**
     * Filter which SponsorCategories to update
     */
    where?: SponsorCategoryWhereInput
  }


  /**
   * SponsorCategory upsert
   */
  export type SponsorCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * The filter to search for the SponsorCategory to update in case it exists.
     */
    where: SponsorCategoryWhereUniqueInput
    /**
     * In case the SponsorCategory found by the `where` argument doesn't exist, create a new SponsorCategory with this data.
     */
    create: XOR<SponsorCategoryCreateInput, SponsorCategoryUncheckedCreateInput>
    /**
     * In case the SponsorCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SponsorCategoryUpdateInput, SponsorCategoryUncheckedUpdateInput>
  }


  /**
   * SponsorCategory delete
   */
  export type SponsorCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
    /**
     * Filter which SponsorCategory to delete.
     */
    where: SponsorCategoryWhereUniqueInput
  }


  /**
   * SponsorCategory deleteMany
   */
  export type SponsorCategoryDeleteManyArgs = {
    /**
     * Filter which SponsorCategories to delete
     */
    where?: SponsorCategoryWhereInput
  }


  /**
   * SponsorCategory findRaw
   */
  export type SponsorCategoryFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * SponsorCategory aggregateRaw
   */
  export type SponsorCategoryAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * SponsorCategory.sponsor
   */
  export type SponsorCategory$sponsorArgs = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorInclude | null
    where?: SponsorWhereInput
    orderBy?: Enumerable<SponsorOrderByWithRelationInput>
    cursor?: SponsorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SponsorScalarFieldEnum>
  }


  /**
   * SponsorCategory without action
   */
  export type SponsorCategoryArgs = {
    /**
     * Select specific fields to fetch from the SponsorCategory
     */
    select?: SponsorCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SponsorCategoryInclude | null
  }



  /**
   * Enums
   */

  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    podcastId: 'podcastId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const PodcastScalarFieldEnum: {
    id: 'id',
    title: 'title',
    imageUrl: 'imageUrl',
    sponsorId: 'sponsorId',
    categoryId: 'categoryId',
    publisher: 'publisher',
    description: 'description',
    backgroundColor: 'backgroundColor',
    externalUrl: 'externalUrl'
  };

  export type PodcastScalarFieldEnum = (typeof PodcastScalarFieldEnum)[keyof typeof PodcastScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SponsorCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    sponsorId: 'sponsorId'
  };

  export type SponsorCategoryScalarFieldEnum = (typeof SponsorCategoryScalarFieldEnum)[keyof typeof SponsorCategoryScalarFieldEnum]


  export const SponsorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    imageUrl: 'imageUrl',
    url: 'url',
    podcastId: 'podcastId',
    sponsorCategoryId: 'sponsorCategoryId',
    summary: 'summary',
    offer: 'offer'
  };

  export type SponsorScalarFieldEnum = (typeof SponsorScalarFieldEnum)[keyof typeof SponsorScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type PodcastWhereInput = {
    AND?: Enumerable<PodcastWhereInput>
    OR?: Enumerable<PodcastWhereInput>
    NOT?: Enumerable<PodcastWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    sponsorId?: StringNullableListFilter
    categoryId?: StringNullableListFilter
    offer?: XOR<OfferCompositeListFilter, Enumerable<OfferObjectEqualityInput>>
    publisher?: StringFilter | string
    description?: StringNullableFilter | string | null
    backgroundColor?: StringNullableFilter | string | null
    externalUrl?: StringNullableFilter | string | null
    category?: CategoryListRelationFilter
    sponsors?: SponsorListRelationFilter
  }

  export type PodcastOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    sponsorId?: SortOrder
    categoryId?: SortOrder
    offer?: OfferOrderByCompositeAggregateInput
    publisher?: SortOrder
    description?: SortOrder
    backgroundColor?: SortOrder
    externalUrl?: SortOrder
    category?: CategoryOrderByRelationAggregateInput
    sponsors?: SponsorOrderByRelationAggregateInput
  }

  export type PodcastWhereUniqueInput = {
    id?: string
    title?: string
  }

  export type PodcastOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    sponsorId?: SortOrder
    categoryId?: SortOrder
    publisher?: SortOrder
    description?: SortOrder
    backgroundColor?: SortOrder
    externalUrl?: SortOrder
    _count?: PodcastCountOrderByAggregateInput
    _max?: PodcastMaxOrderByAggregateInput
    _min?: PodcastMinOrderByAggregateInput
  }

  export type PodcastScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PodcastScalarWhereWithAggregatesInput>
    OR?: Enumerable<PodcastScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PodcastScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    imageUrl?: StringNullableWithAggregatesFilter | string | null
    sponsorId?: StringNullableListFilter
    categoryId?: StringNullableListFilter
    publisher?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    backgroundColor?: StringNullableWithAggregatesFilter | string | null
    externalUrl?: StringNullableWithAggregatesFilter | string | null
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    podcastId?: StringNullableListFilter
    podcast?: PodcastListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    podcastId?: SortOrder
    podcast?: PodcastOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: string
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    podcastId?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    podcastId?: StringNullableListFilter
  }

  export type SponsorWhereInput = {
    AND?: Enumerable<SponsorWhereInput>
    OR?: Enumerable<SponsorWhereInput>
    NOT?: Enumerable<SponsorWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    url?: StringFilter | string
    podcastId?: StringNullableListFilter
    sponsorCategoryId?: StringNullableListFilter
    summary?: StringNullableFilter | string | null
    offer?: StringNullableFilter | string | null
    podcast?: PodcastListRelationFilter
    sponsorCategory?: SponsorCategoryListRelationFilter
  }

  export type SponsorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    url?: SortOrder
    podcastId?: SortOrder
    sponsorCategoryId?: SortOrder
    summary?: SortOrder
    offer?: SortOrder
    podcast?: PodcastOrderByRelationAggregateInput
    sponsorCategory?: SponsorCategoryOrderByRelationAggregateInput
  }

  export type SponsorWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type SponsorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    url?: SortOrder
    podcastId?: SortOrder
    sponsorCategoryId?: SortOrder
    summary?: SortOrder
    offer?: SortOrder
    _count?: SponsorCountOrderByAggregateInput
    _max?: SponsorMaxOrderByAggregateInput
    _min?: SponsorMinOrderByAggregateInput
  }

  export type SponsorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SponsorScalarWhereWithAggregatesInput>
    OR?: Enumerable<SponsorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SponsorScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    imageUrl?: StringNullableWithAggregatesFilter | string | null
    url?: StringWithAggregatesFilter | string
    podcastId?: StringNullableListFilter
    sponsorCategoryId?: StringNullableListFilter
    summary?: StringNullableWithAggregatesFilter | string | null
    offer?: StringNullableWithAggregatesFilter | string | null
  }

  export type SponsorCategoryWhereInput = {
    AND?: Enumerable<SponsorCategoryWhereInput>
    OR?: Enumerable<SponsorCategoryWhereInput>
    NOT?: Enumerable<SponsorCategoryWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    sponsorId?: StringNullableListFilter
    sponsor?: SponsorListRelationFilter
  }

  export type SponsorCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    sponsorId?: SortOrder
    sponsor?: SponsorOrderByRelationAggregateInput
  }

  export type SponsorCategoryWhereUniqueInput = {
    id?: string
  }

  export type SponsorCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    sponsorId?: SortOrder
    _count?: SponsorCategoryCountOrderByAggregateInput
    _max?: SponsorCategoryMaxOrderByAggregateInput
    _min?: SponsorCategoryMinOrderByAggregateInput
  }

  export type SponsorCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SponsorCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<SponsorCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SponsorCategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    sponsorId?: StringNullableListFilter
  }

  export type PodcastCreateInput = {
    id?: string
    title: string
    imageUrl?: string | null
    offer?: XOR<OfferListCreateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher: string
    description?: string | null
    backgroundColor?: string | null
    externalUrl?: string | null
    category?: CategoryCreateNestedManyWithoutPodcastInput
    sponsors?: SponsorCreateNestedManyWithoutPodcastInput
  }

  export type PodcastUncheckedCreateInput = {
    id?: string
    title: string
    imageUrl?: string | null
    sponsorId?: PodcastCreatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastCreatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListCreateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher: string
    description?: string | null
    backgroundColor?: string | null
    externalUrl?: string | null
    category?: CategoryUncheckedCreateNestedManyWithoutPodcastInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutPodcastInput
  }

  export type PodcastUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateManyWithoutPodcastNestedInput
    sponsors?: SponsorUpdateManyWithoutPodcastNestedInput
  }

  export type PodcastUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sponsorId?: PodcastUpdatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastUpdatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUncheckedUpdateManyWithoutPodcastNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutPodcastNestedInput
  }

  export type PodcastCreateManyInput = {
    id?: string
    title: string
    imageUrl?: string | null
    sponsorId?: PodcastCreatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastCreatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListCreateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher: string
    description?: string | null
    backgroundColor?: string | null
    externalUrl?: string | null
  }

  export type PodcastUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PodcastUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sponsorId?: PodcastUpdatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastUpdatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    podcast?: PodcastCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    podcastId?: CategoryCreatepodcastIdInput | Enumerable<string>
    podcast?: PodcastUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    podcast?: PodcastUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    podcastId?: CategoryUpdatepodcastIdInput | Enumerable<string>
    podcast?: PodcastUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    podcastId?: CategoryCreatepodcastIdInput | Enumerable<string>
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    podcastId?: CategoryUpdatepodcastIdInput | Enumerable<string>
  }

  export type SponsorCreateInput = {
    id?: string
    name: string
    imageUrl?: string | null
    url: string
    summary?: string | null
    offer?: string | null
    podcast?: PodcastCreateNestedManyWithoutSponsorsInput
    sponsorCategory?: SponsorCategoryCreateNestedManyWithoutSponsorInput
  }

  export type SponsorUncheckedCreateInput = {
    id?: string
    name: string
    imageUrl?: string | null
    url: string
    podcastId?: SponsorCreatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorCreatesponsorCategoryIdInput | Enumerable<string>
    summary?: string | null
    offer?: string | null
    podcast?: PodcastUncheckedCreateNestedManyWithoutSponsorsInput
    sponsorCategory?: SponsorCategoryUncheckedCreateNestedManyWithoutSponsorInput
  }

  export type SponsorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
    podcast?: PodcastUpdateManyWithoutSponsorsNestedInput
    sponsorCategory?: SponsorCategoryUpdateManyWithoutSponsorNestedInput
  }

  export type SponsorUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    podcastId?: SponsorUpdatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorUpdatesponsorCategoryIdInput | Enumerable<string>
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
    podcast?: PodcastUncheckedUpdateManyWithoutSponsorsNestedInput
    sponsorCategory?: SponsorCategoryUncheckedUpdateManyWithoutSponsorNestedInput
  }

  export type SponsorCreateManyInput = {
    id?: string
    name: string
    imageUrl?: string | null
    url: string
    podcastId?: SponsorCreatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorCreatesponsorCategoryIdInput | Enumerable<string>
    summary?: string | null
    offer?: string | null
  }

  export type SponsorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SponsorUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    podcastId?: SponsorUpdatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorUpdatesponsorCategoryIdInput | Enumerable<string>
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SponsorCategoryCreateInput = {
    id?: string
    name: string
    sponsor?: SponsorCreateNestedManyWithoutSponsorCategoryInput
  }

  export type SponsorCategoryUncheckedCreateInput = {
    id?: string
    name: string
    sponsorId?: SponsorCategoryCreatesponsorIdInput | Enumerable<string>
    sponsor?: SponsorUncheckedCreateNestedManyWithoutSponsorCategoryInput
  }

  export type SponsorCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sponsor?: SponsorUpdateManyWithoutSponsorCategoryNestedInput
  }

  export type SponsorCategoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sponsorId?: SponsorCategoryUpdatesponsorIdInput | Enumerable<string>
    sponsor?: SponsorUncheckedUpdateManyWithoutSponsorCategoryNestedInput
  }

  export type SponsorCategoryCreateManyInput = {
    id?: string
    name: string
    sponsorId?: SponsorCategoryCreatesponsorIdInput | Enumerable<string>
  }

  export type SponsorCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SponsorCategoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    sponsorId?: SponsorCategoryUpdatesponsorIdInput | Enumerable<string>
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type OfferCompositeListFilter = {
    equals?: Enumerable<OfferObjectEqualityInput>
    every?: OfferWhereInput
    some?: OfferWhereInput
    none?: OfferWhereInput
    isEmpty?: boolean
    isSet?: boolean
  }

  export type OfferObjectEqualityInput = {
    sponsor: string
    promoCode?: string | null
    url: string
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type SponsorListRelationFilter = {
    every?: SponsorWhereInput
    some?: SponsorWhereInput
    none?: SponsorWhereInput
  }

  export type OfferOrderByCompositeAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SponsorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PodcastCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    sponsorId?: SortOrder
    categoryId?: SortOrder
    publisher?: SortOrder
    description?: SortOrder
    backgroundColor?: SortOrder
    externalUrl?: SortOrder
  }

  export type PodcastMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    publisher?: SortOrder
    description?: SortOrder
    backgroundColor?: SortOrder
    externalUrl?: SortOrder
  }

  export type PodcastMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imageUrl?: SortOrder
    publisher?: SortOrder
    description?: SortOrder
    backgroundColor?: SortOrder
    externalUrl?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type PodcastListRelationFilter = {
    every?: PodcastWhereInput
    some?: PodcastWhereInput
    none?: PodcastWhereInput
  }

  export type PodcastOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    podcastId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SponsorCategoryListRelationFilter = {
    every?: SponsorCategoryWhereInput
    some?: SponsorCategoryWhereInput
    none?: SponsorCategoryWhereInput
  }

  export type SponsorCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SponsorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    url?: SortOrder
    podcastId?: SortOrder
    sponsorCategoryId?: SortOrder
    summary?: SortOrder
    offer?: SortOrder
  }

  export type SponsorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    url?: SortOrder
    summary?: SortOrder
    offer?: SortOrder
  }

  export type SponsorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    url?: SortOrder
    summary?: SortOrder
    offer?: SortOrder
  }

  export type SponsorCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sponsorId?: SortOrder
  }

  export type SponsorCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SponsorCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OfferListCreateEnvelopeInput = {
    set?: Enumerable<OfferCreateInput>
  }

  export type OfferCreateInput = {
    sponsor: string
    promoCode?: string | null
    url: string
  }

  export type CategoryCreateNestedManyWithoutPodcastInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutPodcastInput>, Enumerable<CategoryUncheckedCreateWithoutPodcastInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutPodcastInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type SponsorCreateNestedManyWithoutPodcastInput = {
    create?: XOR<Enumerable<SponsorCreateWithoutPodcastInput>, Enumerable<SponsorUncheckedCreateWithoutPodcastInput>>
    connectOrCreate?: Enumerable<SponsorCreateOrConnectWithoutPodcastInput>
    connect?: Enumerable<SponsorWhereUniqueInput>
  }

  export type PodcastCreatesponsorIdInput = {
    set: Enumerable<string>
  }

  export type PodcastCreatecategoryIdInput = {
    set: Enumerable<string>
  }

  export type CategoryUncheckedCreateNestedManyWithoutPodcastInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutPodcastInput>, Enumerable<CategoryUncheckedCreateWithoutPodcastInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutPodcastInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type SponsorUncheckedCreateNestedManyWithoutPodcastInput = {
    create?: XOR<Enumerable<SponsorCreateWithoutPodcastInput>, Enumerable<SponsorUncheckedCreateWithoutPodcastInput>>
    connectOrCreate?: Enumerable<SponsorCreateOrConnectWithoutPodcastInput>
    connect?: Enumerable<SponsorWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type OfferListUpdateEnvelopeInput = {
    set?: Enumerable<OfferCreateInput>
    push?: Enumerable<OfferCreateInput>
    updateMany?: OfferUpdateManyInput
    deleteMany?: OfferDeleteManyInput
  }

  export type CategoryUpdateManyWithoutPodcastNestedInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutPodcastInput>, Enumerable<CategoryUncheckedCreateWithoutPodcastInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutPodcastInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutPodcastInput>
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutPodcastInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutPodcastInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type SponsorUpdateManyWithoutPodcastNestedInput = {
    create?: XOR<Enumerable<SponsorCreateWithoutPodcastInput>, Enumerable<SponsorUncheckedCreateWithoutPodcastInput>>
    connectOrCreate?: Enumerable<SponsorCreateOrConnectWithoutPodcastInput>
    upsert?: Enumerable<SponsorUpsertWithWhereUniqueWithoutPodcastInput>
    set?: Enumerable<SponsorWhereUniqueInput>
    disconnect?: Enumerable<SponsorWhereUniqueInput>
    delete?: Enumerable<SponsorWhereUniqueInput>
    connect?: Enumerable<SponsorWhereUniqueInput>
    update?: Enumerable<SponsorUpdateWithWhereUniqueWithoutPodcastInput>
    updateMany?: Enumerable<SponsorUpdateManyWithWhereWithoutPodcastInput>
    deleteMany?: Enumerable<SponsorScalarWhereInput>
  }

  export type PodcastUpdatesponsorIdInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type PodcastUpdatecategoryIdInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type CategoryUncheckedUpdateManyWithoutPodcastNestedInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutPodcastInput>, Enumerable<CategoryUncheckedCreateWithoutPodcastInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutPodcastInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutPodcastInput>
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutPodcastInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutPodcastInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type SponsorUncheckedUpdateManyWithoutPodcastNestedInput = {
    create?: XOR<Enumerable<SponsorCreateWithoutPodcastInput>, Enumerable<SponsorUncheckedCreateWithoutPodcastInput>>
    connectOrCreate?: Enumerable<SponsorCreateOrConnectWithoutPodcastInput>
    upsert?: Enumerable<SponsorUpsertWithWhereUniqueWithoutPodcastInput>
    set?: Enumerable<SponsorWhereUniqueInput>
    disconnect?: Enumerable<SponsorWhereUniqueInput>
    delete?: Enumerable<SponsorWhereUniqueInput>
    connect?: Enumerable<SponsorWhereUniqueInput>
    update?: Enumerable<SponsorUpdateWithWhereUniqueWithoutPodcastInput>
    updateMany?: Enumerable<SponsorUpdateManyWithWhereWithoutPodcastInput>
    deleteMany?: Enumerable<SponsorScalarWhereInput>
  }

  export type PodcastCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<PodcastCreateWithoutCategoryInput>, Enumerable<PodcastUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<PodcastCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<PodcastWhereUniqueInput>
  }

  export type CategoryCreatepodcastIdInput = {
    set: Enumerable<string>
  }

  export type PodcastUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<PodcastCreateWithoutCategoryInput>, Enumerable<PodcastUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<PodcastCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<PodcastWhereUniqueInput>
  }

  export type PodcastUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<PodcastCreateWithoutCategoryInput>, Enumerable<PodcastUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<PodcastCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<PodcastUpsertWithWhereUniqueWithoutCategoryInput>
    set?: Enumerable<PodcastWhereUniqueInput>
    disconnect?: Enumerable<PodcastWhereUniqueInput>
    delete?: Enumerable<PodcastWhereUniqueInput>
    connect?: Enumerable<PodcastWhereUniqueInput>
    update?: Enumerable<PodcastUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<PodcastUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<PodcastScalarWhereInput>
  }

  export type CategoryUpdatepodcastIdInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type PodcastUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<PodcastCreateWithoutCategoryInput>, Enumerable<PodcastUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<PodcastCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<PodcastUpsertWithWhereUniqueWithoutCategoryInput>
    set?: Enumerable<PodcastWhereUniqueInput>
    disconnect?: Enumerable<PodcastWhereUniqueInput>
    delete?: Enumerable<PodcastWhereUniqueInput>
    connect?: Enumerable<PodcastWhereUniqueInput>
    update?: Enumerable<PodcastUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<PodcastUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<PodcastScalarWhereInput>
  }

  export type PodcastCreateNestedManyWithoutSponsorsInput = {
    create?: XOR<Enumerable<PodcastCreateWithoutSponsorsInput>, Enumerable<PodcastUncheckedCreateWithoutSponsorsInput>>
    connectOrCreate?: Enumerable<PodcastCreateOrConnectWithoutSponsorsInput>
    connect?: Enumerable<PodcastWhereUniqueInput>
  }

  export type SponsorCategoryCreateNestedManyWithoutSponsorInput = {
    create?: XOR<Enumerable<SponsorCategoryCreateWithoutSponsorInput>, Enumerable<SponsorCategoryUncheckedCreateWithoutSponsorInput>>
    connectOrCreate?: Enumerable<SponsorCategoryCreateOrConnectWithoutSponsorInput>
    connect?: Enumerable<SponsorCategoryWhereUniqueInput>
  }

  export type SponsorCreatepodcastIdInput = {
    set: Enumerable<string>
  }

  export type SponsorCreatesponsorCategoryIdInput = {
    set: Enumerable<string>
  }

  export type PodcastUncheckedCreateNestedManyWithoutSponsorsInput = {
    create?: XOR<Enumerable<PodcastCreateWithoutSponsorsInput>, Enumerable<PodcastUncheckedCreateWithoutSponsorsInput>>
    connectOrCreate?: Enumerable<PodcastCreateOrConnectWithoutSponsorsInput>
    connect?: Enumerable<PodcastWhereUniqueInput>
  }

  export type SponsorCategoryUncheckedCreateNestedManyWithoutSponsorInput = {
    create?: XOR<Enumerable<SponsorCategoryCreateWithoutSponsorInput>, Enumerable<SponsorCategoryUncheckedCreateWithoutSponsorInput>>
    connectOrCreate?: Enumerable<SponsorCategoryCreateOrConnectWithoutSponsorInput>
    connect?: Enumerable<SponsorCategoryWhereUniqueInput>
  }

  export type PodcastUpdateManyWithoutSponsorsNestedInput = {
    create?: XOR<Enumerable<PodcastCreateWithoutSponsorsInput>, Enumerable<PodcastUncheckedCreateWithoutSponsorsInput>>
    connectOrCreate?: Enumerable<PodcastCreateOrConnectWithoutSponsorsInput>
    upsert?: Enumerable<PodcastUpsertWithWhereUniqueWithoutSponsorsInput>
    set?: Enumerable<PodcastWhereUniqueInput>
    disconnect?: Enumerable<PodcastWhereUniqueInput>
    delete?: Enumerable<PodcastWhereUniqueInput>
    connect?: Enumerable<PodcastWhereUniqueInput>
    update?: Enumerable<PodcastUpdateWithWhereUniqueWithoutSponsorsInput>
    updateMany?: Enumerable<PodcastUpdateManyWithWhereWithoutSponsorsInput>
    deleteMany?: Enumerable<PodcastScalarWhereInput>
  }

  export type SponsorCategoryUpdateManyWithoutSponsorNestedInput = {
    create?: XOR<Enumerable<SponsorCategoryCreateWithoutSponsorInput>, Enumerable<SponsorCategoryUncheckedCreateWithoutSponsorInput>>
    connectOrCreate?: Enumerable<SponsorCategoryCreateOrConnectWithoutSponsorInput>
    upsert?: Enumerable<SponsorCategoryUpsertWithWhereUniqueWithoutSponsorInput>
    set?: Enumerable<SponsorCategoryWhereUniqueInput>
    disconnect?: Enumerable<SponsorCategoryWhereUniqueInput>
    delete?: Enumerable<SponsorCategoryWhereUniqueInput>
    connect?: Enumerable<SponsorCategoryWhereUniqueInput>
    update?: Enumerable<SponsorCategoryUpdateWithWhereUniqueWithoutSponsorInput>
    updateMany?: Enumerable<SponsorCategoryUpdateManyWithWhereWithoutSponsorInput>
    deleteMany?: Enumerable<SponsorCategoryScalarWhereInput>
  }

  export type SponsorUpdatepodcastIdInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type SponsorUpdatesponsorCategoryIdInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type PodcastUncheckedUpdateManyWithoutSponsorsNestedInput = {
    create?: XOR<Enumerable<PodcastCreateWithoutSponsorsInput>, Enumerable<PodcastUncheckedCreateWithoutSponsorsInput>>
    connectOrCreate?: Enumerable<PodcastCreateOrConnectWithoutSponsorsInput>
    upsert?: Enumerable<PodcastUpsertWithWhereUniqueWithoutSponsorsInput>
    set?: Enumerable<PodcastWhereUniqueInput>
    disconnect?: Enumerable<PodcastWhereUniqueInput>
    delete?: Enumerable<PodcastWhereUniqueInput>
    connect?: Enumerable<PodcastWhereUniqueInput>
    update?: Enumerable<PodcastUpdateWithWhereUniqueWithoutSponsorsInput>
    updateMany?: Enumerable<PodcastUpdateManyWithWhereWithoutSponsorsInput>
    deleteMany?: Enumerable<PodcastScalarWhereInput>
  }

  export type SponsorCategoryUncheckedUpdateManyWithoutSponsorNestedInput = {
    create?: XOR<Enumerable<SponsorCategoryCreateWithoutSponsorInput>, Enumerable<SponsorCategoryUncheckedCreateWithoutSponsorInput>>
    connectOrCreate?: Enumerable<SponsorCategoryCreateOrConnectWithoutSponsorInput>
    upsert?: Enumerable<SponsorCategoryUpsertWithWhereUniqueWithoutSponsorInput>
    set?: Enumerable<SponsorCategoryWhereUniqueInput>
    disconnect?: Enumerable<SponsorCategoryWhereUniqueInput>
    delete?: Enumerable<SponsorCategoryWhereUniqueInput>
    connect?: Enumerable<SponsorCategoryWhereUniqueInput>
    update?: Enumerable<SponsorCategoryUpdateWithWhereUniqueWithoutSponsorInput>
    updateMany?: Enumerable<SponsorCategoryUpdateManyWithWhereWithoutSponsorInput>
    deleteMany?: Enumerable<SponsorCategoryScalarWhereInput>
  }

  export type SponsorCreateNestedManyWithoutSponsorCategoryInput = {
    create?: XOR<Enumerable<SponsorCreateWithoutSponsorCategoryInput>, Enumerable<SponsorUncheckedCreateWithoutSponsorCategoryInput>>
    connectOrCreate?: Enumerable<SponsorCreateOrConnectWithoutSponsorCategoryInput>
    connect?: Enumerable<SponsorWhereUniqueInput>
  }

  export type SponsorCategoryCreatesponsorIdInput = {
    set: Enumerable<string>
  }

  export type SponsorUncheckedCreateNestedManyWithoutSponsorCategoryInput = {
    create?: XOR<Enumerable<SponsorCreateWithoutSponsorCategoryInput>, Enumerable<SponsorUncheckedCreateWithoutSponsorCategoryInput>>
    connectOrCreate?: Enumerable<SponsorCreateOrConnectWithoutSponsorCategoryInput>
    connect?: Enumerable<SponsorWhereUniqueInput>
  }

  export type SponsorUpdateManyWithoutSponsorCategoryNestedInput = {
    create?: XOR<Enumerable<SponsorCreateWithoutSponsorCategoryInput>, Enumerable<SponsorUncheckedCreateWithoutSponsorCategoryInput>>
    connectOrCreate?: Enumerable<SponsorCreateOrConnectWithoutSponsorCategoryInput>
    upsert?: Enumerable<SponsorUpsertWithWhereUniqueWithoutSponsorCategoryInput>
    set?: Enumerable<SponsorWhereUniqueInput>
    disconnect?: Enumerable<SponsorWhereUniqueInput>
    delete?: Enumerable<SponsorWhereUniqueInput>
    connect?: Enumerable<SponsorWhereUniqueInput>
    update?: Enumerable<SponsorUpdateWithWhereUniqueWithoutSponsorCategoryInput>
    updateMany?: Enumerable<SponsorUpdateManyWithWhereWithoutSponsorCategoryInput>
    deleteMany?: Enumerable<SponsorScalarWhereInput>
  }

  export type SponsorCategoryUpdatesponsorIdInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type SponsorUncheckedUpdateManyWithoutSponsorCategoryNestedInput = {
    create?: XOR<Enumerable<SponsorCreateWithoutSponsorCategoryInput>, Enumerable<SponsorUncheckedCreateWithoutSponsorCategoryInput>>
    connectOrCreate?: Enumerable<SponsorCreateOrConnectWithoutSponsorCategoryInput>
    upsert?: Enumerable<SponsorUpsertWithWhereUniqueWithoutSponsorCategoryInput>
    set?: Enumerable<SponsorWhereUniqueInput>
    disconnect?: Enumerable<SponsorWhereUniqueInput>
    delete?: Enumerable<SponsorWhereUniqueInput>
    connect?: Enumerable<SponsorWhereUniqueInput>
    update?: Enumerable<SponsorUpdateWithWhereUniqueWithoutSponsorCategoryInput>
    updateMany?: Enumerable<SponsorUpdateManyWithWhereWithoutSponsorCategoryInput>
    deleteMany?: Enumerable<SponsorScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type OfferWhereInput = {
    AND?: Enumerable<OfferWhereInput>
    OR?: Enumerable<OfferWhereInput>
    NOT?: Enumerable<OfferWhereInput>
    sponsor?: StringFilter | string
    promoCode?: StringNullableFilter | string | null
    url?: StringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type CategoryCreateWithoutPodcastInput = {
    id?: string
    name: string
  }

  export type CategoryUncheckedCreateWithoutPodcastInput = {
    id?: string
    name: string
    podcastId?: CategoryCreatepodcastIdInput | Enumerable<string>
  }

  export type CategoryCreateOrConnectWithoutPodcastInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutPodcastInput, CategoryUncheckedCreateWithoutPodcastInput>
  }

  export type SponsorCreateWithoutPodcastInput = {
    id?: string
    name: string
    imageUrl?: string | null
    url: string
    summary?: string | null
    offer?: string | null
    sponsorCategory?: SponsorCategoryCreateNestedManyWithoutSponsorInput
  }

  export type SponsorUncheckedCreateWithoutPodcastInput = {
    id?: string
    name: string
    imageUrl?: string | null
    url: string
    podcastId?: SponsorCreatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorCreatesponsorCategoryIdInput | Enumerable<string>
    summary?: string | null
    offer?: string | null
    sponsorCategory?: SponsorCategoryUncheckedCreateNestedManyWithoutSponsorInput
  }

  export type SponsorCreateOrConnectWithoutPodcastInput = {
    where: SponsorWhereUniqueInput
    create: XOR<SponsorCreateWithoutPodcastInput, SponsorUncheckedCreateWithoutPodcastInput>
  }

  export type OfferUpdateManyInput = {
    where: OfferWhereInput
    data: OfferUpdateInput
  }

  export type OfferDeleteManyInput = {
    where: OfferWhereInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutPodcastInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutPodcastInput, CategoryUncheckedUpdateWithoutPodcastInput>
    create: XOR<CategoryCreateWithoutPodcastInput, CategoryUncheckedCreateWithoutPodcastInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutPodcastInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutPodcastInput, CategoryUncheckedUpdateWithoutPodcastInput>
  }

  export type CategoryUpdateManyWithWhereWithoutPodcastInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: Enumerable<CategoryScalarWhereInput>
    OR?: Enumerable<CategoryScalarWhereInput>
    NOT?: Enumerable<CategoryScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    podcastId?: StringNullableListFilter
  }

  export type SponsorUpsertWithWhereUniqueWithoutPodcastInput = {
    where: SponsorWhereUniqueInput
    update: XOR<SponsorUpdateWithoutPodcastInput, SponsorUncheckedUpdateWithoutPodcastInput>
    create: XOR<SponsorCreateWithoutPodcastInput, SponsorUncheckedCreateWithoutPodcastInput>
  }

  export type SponsorUpdateWithWhereUniqueWithoutPodcastInput = {
    where: SponsorWhereUniqueInput
    data: XOR<SponsorUpdateWithoutPodcastInput, SponsorUncheckedUpdateWithoutPodcastInput>
  }

  export type SponsorUpdateManyWithWhereWithoutPodcastInput = {
    where: SponsorScalarWhereInput
    data: XOR<SponsorUpdateManyMutationInput, SponsorUncheckedUpdateManyWithoutSponsorsInput>
  }

  export type SponsorScalarWhereInput = {
    AND?: Enumerable<SponsorScalarWhereInput>
    OR?: Enumerable<SponsorScalarWhereInput>
    NOT?: Enumerable<SponsorScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    url?: StringFilter | string
    podcastId?: StringNullableListFilter
    sponsorCategoryId?: StringNullableListFilter
    summary?: StringNullableFilter | string | null
    offer?: StringNullableFilter | string | null
  }

  export type PodcastCreateWithoutCategoryInput = {
    id?: string
    title: string
    imageUrl?: string | null
    offer?: XOR<OfferListCreateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher: string
    description?: string | null
    backgroundColor?: string | null
    externalUrl?: string | null
    sponsors?: SponsorCreateNestedManyWithoutPodcastInput
  }

  export type PodcastUncheckedCreateWithoutCategoryInput = {
    id?: string
    title: string
    imageUrl?: string | null
    sponsorId?: PodcastCreatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastCreatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListCreateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher: string
    description?: string | null
    backgroundColor?: string | null
    externalUrl?: string | null
    sponsors?: SponsorUncheckedCreateNestedManyWithoutPodcastInput
  }

  export type PodcastCreateOrConnectWithoutCategoryInput = {
    where: PodcastWhereUniqueInput
    create: XOR<PodcastCreateWithoutCategoryInput, PodcastUncheckedCreateWithoutCategoryInput>
  }

  export type PodcastUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PodcastWhereUniqueInput
    update: XOR<PodcastUpdateWithoutCategoryInput, PodcastUncheckedUpdateWithoutCategoryInput>
    create: XOR<PodcastCreateWithoutCategoryInput, PodcastUncheckedCreateWithoutCategoryInput>
  }

  export type PodcastUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PodcastWhereUniqueInput
    data: XOR<PodcastUpdateWithoutCategoryInput, PodcastUncheckedUpdateWithoutCategoryInput>
  }

  export type PodcastUpdateManyWithWhereWithoutCategoryInput = {
    where: PodcastScalarWhereInput
    data: XOR<PodcastUpdateManyMutationInput, PodcastUncheckedUpdateManyWithoutPodcastInput>
  }

  export type PodcastScalarWhereInput = {
    AND?: Enumerable<PodcastScalarWhereInput>
    OR?: Enumerable<PodcastScalarWhereInput>
    NOT?: Enumerable<PodcastScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    sponsorId?: StringNullableListFilter
    categoryId?: StringNullableListFilter
    publisher?: StringFilter | string
    description?: StringNullableFilter | string | null
    backgroundColor?: StringNullableFilter | string | null
    externalUrl?: StringNullableFilter | string | null
  }

  export type PodcastCreateWithoutSponsorsInput = {
    id?: string
    title: string
    imageUrl?: string | null
    offer?: XOR<OfferListCreateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher: string
    description?: string | null
    backgroundColor?: string | null
    externalUrl?: string | null
    category?: CategoryCreateNestedManyWithoutPodcastInput
  }

  export type PodcastUncheckedCreateWithoutSponsorsInput = {
    id?: string
    title: string
    imageUrl?: string | null
    sponsorId?: PodcastCreatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastCreatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListCreateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher: string
    description?: string | null
    backgroundColor?: string | null
    externalUrl?: string | null
    category?: CategoryUncheckedCreateNestedManyWithoutPodcastInput
  }

  export type PodcastCreateOrConnectWithoutSponsorsInput = {
    where: PodcastWhereUniqueInput
    create: XOR<PodcastCreateWithoutSponsorsInput, PodcastUncheckedCreateWithoutSponsorsInput>
  }

  export type SponsorCategoryCreateWithoutSponsorInput = {
    id?: string
    name: string
  }

  export type SponsorCategoryUncheckedCreateWithoutSponsorInput = {
    id?: string
    name: string
    sponsorId?: SponsorCategoryCreatesponsorIdInput | Enumerable<string>
  }

  export type SponsorCategoryCreateOrConnectWithoutSponsorInput = {
    where: SponsorCategoryWhereUniqueInput
    create: XOR<SponsorCategoryCreateWithoutSponsorInput, SponsorCategoryUncheckedCreateWithoutSponsorInput>
  }

  export type PodcastUpsertWithWhereUniqueWithoutSponsorsInput = {
    where: PodcastWhereUniqueInput
    update: XOR<PodcastUpdateWithoutSponsorsInput, PodcastUncheckedUpdateWithoutSponsorsInput>
    create: XOR<PodcastCreateWithoutSponsorsInput, PodcastUncheckedCreateWithoutSponsorsInput>
  }

  export type PodcastUpdateWithWhereUniqueWithoutSponsorsInput = {
    where: PodcastWhereUniqueInput
    data: XOR<PodcastUpdateWithoutSponsorsInput, PodcastUncheckedUpdateWithoutSponsorsInput>
  }

  export type PodcastUpdateManyWithWhereWithoutSponsorsInput = {
    where: PodcastScalarWhereInput
    data: XOR<PodcastUpdateManyMutationInput, PodcastUncheckedUpdateManyWithoutPodcastInput>
  }

  export type SponsorCategoryUpsertWithWhereUniqueWithoutSponsorInput = {
    where: SponsorCategoryWhereUniqueInput
    update: XOR<SponsorCategoryUpdateWithoutSponsorInput, SponsorCategoryUncheckedUpdateWithoutSponsorInput>
    create: XOR<SponsorCategoryCreateWithoutSponsorInput, SponsorCategoryUncheckedCreateWithoutSponsorInput>
  }

  export type SponsorCategoryUpdateWithWhereUniqueWithoutSponsorInput = {
    where: SponsorCategoryWhereUniqueInput
    data: XOR<SponsorCategoryUpdateWithoutSponsorInput, SponsorCategoryUncheckedUpdateWithoutSponsorInput>
  }

  export type SponsorCategoryUpdateManyWithWhereWithoutSponsorInput = {
    where: SponsorCategoryScalarWhereInput
    data: XOR<SponsorCategoryUpdateManyMutationInput, SponsorCategoryUncheckedUpdateManyWithoutSponsorCategoryInput>
  }

  export type SponsorCategoryScalarWhereInput = {
    AND?: Enumerable<SponsorCategoryScalarWhereInput>
    OR?: Enumerable<SponsorCategoryScalarWhereInput>
    NOT?: Enumerable<SponsorCategoryScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    sponsorId?: StringNullableListFilter
  }

  export type SponsorCreateWithoutSponsorCategoryInput = {
    id?: string
    name: string
    imageUrl?: string | null
    url: string
    summary?: string | null
    offer?: string | null
    podcast?: PodcastCreateNestedManyWithoutSponsorsInput
  }

  export type SponsorUncheckedCreateWithoutSponsorCategoryInput = {
    id?: string
    name: string
    imageUrl?: string | null
    url: string
    podcastId?: SponsorCreatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorCreatesponsorCategoryIdInput | Enumerable<string>
    summary?: string | null
    offer?: string | null
    podcast?: PodcastUncheckedCreateNestedManyWithoutSponsorsInput
  }

  export type SponsorCreateOrConnectWithoutSponsorCategoryInput = {
    where: SponsorWhereUniqueInput
    create: XOR<SponsorCreateWithoutSponsorCategoryInput, SponsorUncheckedCreateWithoutSponsorCategoryInput>
  }

  export type SponsorUpsertWithWhereUniqueWithoutSponsorCategoryInput = {
    where: SponsorWhereUniqueInput
    update: XOR<SponsorUpdateWithoutSponsorCategoryInput, SponsorUncheckedUpdateWithoutSponsorCategoryInput>
    create: XOR<SponsorCreateWithoutSponsorCategoryInput, SponsorUncheckedCreateWithoutSponsorCategoryInput>
  }

  export type SponsorUpdateWithWhereUniqueWithoutSponsorCategoryInput = {
    where: SponsorWhereUniqueInput
    data: XOR<SponsorUpdateWithoutSponsorCategoryInput, SponsorUncheckedUpdateWithoutSponsorCategoryInput>
  }

  export type SponsorUpdateManyWithWhereWithoutSponsorCategoryInput = {
    where: SponsorScalarWhereInput
    data: XOR<SponsorUpdateManyMutationInput, SponsorUncheckedUpdateManyWithoutSponsorInput>
  }

  export type OfferUpdateInput = {
    sponsor?: StringFieldUpdateOperationsInput | string
    promoCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUpdateWithoutPodcastInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutPodcastInput = {
    name?: StringFieldUpdateOperationsInput | string
    podcastId?: CategoryUpdatepodcastIdInput | Enumerable<string>
  }

  export type CategoryUncheckedUpdateManyWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    podcastId?: CategoryUpdatepodcastIdInput | Enumerable<string>
  }

  export type SponsorUpdateWithoutPodcastInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
    sponsorCategory?: SponsorCategoryUpdateManyWithoutSponsorNestedInput
  }

  export type SponsorUncheckedUpdateWithoutPodcastInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    podcastId?: SponsorUpdatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorUpdatesponsorCategoryIdInput | Enumerable<string>
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
    sponsorCategory?: SponsorCategoryUncheckedUpdateManyWithoutSponsorNestedInput
  }

  export type SponsorUncheckedUpdateManyWithoutSponsorsInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    podcastId?: SponsorUpdatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorUpdatesponsorCategoryIdInput | Enumerable<string>
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PodcastUpdateWithoutCategoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sponsors?: SponsorUpdateManyWithoutPodcastNestedInput
  }

  export type PodcastUncheckedUpdateWithoutCategoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sponsorId?: PodcastUpdatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastUpdatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sponsors?: SponsorUncheckedUpdateManyWithoutPodcastNestedInput
  }

  export type PodcastUncheckedUpdateManyWithoutPodcastInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sponsorId?: PodcastUpdatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastUpdatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PodcastUpdateWithoutSponsorsInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateManyWithoutPodcastNestedInput
  }

  export type PodcastUncheckedUpdateWithoutSponsorsInput = {
    title?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sponsorId?: PodcastUpdatesponsorIdInput | Enumerable<string>
    categoryId?: PodcastUpdatecategoryIdInput | Enumerable<string>
    offer?: XOR<OfferListUpdateEnvelopeInput, Enumerable<OfferCreateInput>>
    publisher?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    externalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUncheckedUpdateManyWithoutPodcastNestedInput
  }

  export type SponsorCategoryUpdateWithoutSponsorInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SponsorCategoryUncheckedUpdateWithoutSponsorInput = {
    name?: StringFieldUpdateOperationsInput | string
    sponsorId?: SponsorCategoryUpdatesponsorIdInput | Enumerable<string>
  }

  export type SponsorCategoryUncheckedUpdateManyWithoutSponsorCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    sponsorId?: SponsorCategoryUpdatesponsorIdInput | Enumerable<string>
  }

  export type SponsorUpdateWithoutSponsorCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
    podcast?: PodcastUpdateManyWithoutSponsorsNestedInput
  }

  export type SponsorUncheckedUpdateWithoutSponsorCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    podcastId?: SponsorUpdatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorUpdatesponsorCategoryIdInput | Enumerable<string>
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
    podcast?: PodcastUncheckedUpdateManyWithoutSponsorsNestedInput
  }

  export type SponsorUncheckedUpdateManyWithoutSponsorInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    podcastId?: SponsorUpdatepodcastIdInput | Enumerable<string>
    sponsorCategoryId?: SponsorUpdatesponsorCategoryIdInput | Enumerable<string>
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    offer?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}